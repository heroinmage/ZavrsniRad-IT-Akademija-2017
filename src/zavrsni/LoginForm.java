/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package zavrsni;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.awt.event.KeyEvent;
import java.util.HashSet;
import java.util.Set;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;

/**
 *
 * @author boost
 */
public class LoginForm extends javax.swing.JFrame {

    private final String dozvoljeniKarakteri;
    
    static String url = "jdbc:mysql://localhost:3306/stomatologija?zeroDateTimeBehavior=convertToNull";
    static String user = "root";
    static String password = "xxxx";
    
    public LoginForm() {
        
        this.dozvoljeniKarakteri = "[a-zA-Z0-9,.;:_'\\s-]+$";
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        upozorenje = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        iconLabel = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        passwordLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        UsernameLabel = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Login");
        setMinimumSize(new java.awt.Dimension(400, 300));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(upozorenje, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 10, 270, 40));

        iconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/loginicn.png"))); // NOI18N

        usernameField.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        usernameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameFieldActionPerformed(evt);
            }
        });

        passwordLabel.setText("Password:");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/buttonIco.png"))); // NOI18N
        jButton1.setText("Login");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        UsernameLabel.setText("Username:");

        passwordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                passwordFieldKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(82, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(passwordLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(UsernameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(iconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(133, 133, 133))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(iconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(UsernameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(passwordLabel)
                    .addComponent(passwordField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addGap(33, 33, 33))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 300));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
private static void populateDatabase(Pacijent pp) {

        Session session = HibernateUtil.getFactory().openSession();
        Transaction tx = session.beginTransaction();

        Set<Pacijent> pacijenti = new HashSet<>();
        pacijenti.add(pp);

        Zaposleni z1 = new Zaposleni("Nikola", "Petrovic", "0643233", "Zubar", "muski", pacijenti);
        Zaposleni z2 = new Zaposleni("Neven", "Petroevic", "0643444233", "Zuvar", "zenski");

        ZaposleniDetails zd = new ZaposleniDetails("qwe", "qwe", "1312992710085", 1);
        ZaposleniDetails zd2 = new ZaposleniDetails("www", "www", "1212992710085", 1);

        zd2.setZaposleni(z2);
        z2.setzDetails(zd2);

        zd.setZaposleni(z1);
        z1.setzDetails(zd);

        session.persist(z1);
        session.persist(z2);

        tx.commit();
        session.close();
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            try (Connection conn = DriverManager.getConnection(url, user,password)) {

                String query = "SELECT * FROM zaposlenidetails where username=? AND password=?";
                try (PreparedStatement ps = conn.prepareStatement(query)) {

                    if (usernameField.getText().matches(dozvoljeniKarakteri)) {
                        if (passwordField.getText().matches(dozvoljeniKarakteri)) {

                            ps.setString(1, usernameField.getText());
                            ps.setString(2, passwordField.getText());

                            ResultSet rs = ps.executeQuery();
                            int admin = 0;
                            int count = 0;
                            while (rs.next()) {
                                admin = admin + rs.getInt("adminAcc");

                                count++;
                            }

                            if (count > 1) {

                                JOptionPane.showMessageDialog(null, "Success");

                                if (admin >= 1) {
                                    dispose();
                                    NewJFrame nf = new NewJFrame();
                                    nf.setLocationRelativeTo(null);
                                    nf.setVisible(true);
                                } else {
                                    dispose();
                                    NewJFrame nf = new NewJFrame();
                                    nf.setLocationRelativeTo(null);
                                    nf.hideTab();
                                    nf.setVisible(true);
                                    
                                }

                            } else {
                                JOptionPane.showMessageDialog(null, "Username or password bad");
                            }
                        } else {
                            upozorenje.setText("Nedozvoljeni karakter za password");
                        }

                    } else {
                        upozorenje.setText("Nedozvoljeni karakter za username");
                    }
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(LoginForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void usernameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameFieldActionPerformed

    private void passwordFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {

            try {
                try (Connection conn = DriverManager.getConnection(url, user,password)) {

                    String query = "SELECT * FROM zaposlenidetails where username=? AND password=?";
                    try (PreparedStatement ps = conn.prepareStatement(query)) {

                        if (usernameField.getText().matches(dozvoljeniKarakteri)) {
                            if (passwordField.getText().matches(dozvoljeniKarakteri)) {

                                ps.setString(1, usernameField.getText());
                                ps.setString(2, passwordField.getText());

                                ResultSet rs = ps.executeQuery();
                                int admin = 0;
                                int count = 0;
                                while (rs.next()) {
                                    admin = admin + rs.getInt("adminAcc");

                                    count++;
                                }

                                if (count >= 1) {

                                    JOptionPane.showMessageDialog(null, "Success");

                                    if (admin >= 1) {
                                        dispose();
                                        NewJFrame nf = new NewJFrame();
                                        nf.setLocationRelativeTo(null);
                                        nf.setVisible(true);
                                    } else {
                                        dispose();
                                        NewJFrame nf = new NewJFrame();
                                        nf.hideTab();
                                        nf.setLocationRelativeTo(null);
                                        nf.setVisible(true);
                                    }

                                } else {
                                    JOptionPane.showMessageDialog(null, "Username or password bad");
                                }
                            } else {
                                upozorenje.setText("Nedozvoljeni karakter za password");
                            }

                        } else {
                            upozorenje.setText("Nedozvoljeni karakter za username");
                        }
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(LoginForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }//GEN-LAST:event_passwordFieldKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                if(NewJFrame.url==null){
                 
                }
                try (Connection conn = DriverManager.getConnection(url, user,password)) {
                    ResultSet resultSet = conn.getMetaData().getTables(null, null, "%", null);

                    if (!resultSet.next()) {

                        populateDatabase(new Pacijent("imedoz", "prezedos", "1231231", "uslugica", "1312992710085", "muski"));

                    }

                    PreparedStatement ps = conn.prepareStatement("SELECT * FROM zaposleni");
                    ResultSet rs = ps.executeQuery();

                    if (!rs.next()) {

                        populateDatabase(new Pacijent("Stockime", "Stockprezime", "1231231", "izbeljivanje", "1312992710085", "muski"));
                        populateDatabase(new Pacijent("Stockdva", "Prezimedva ", "44444", "pregled", "1312442733085", "zenski"));

                    }

                } catch (HibernateException e) {
                } catch (SQLException ex) {
                    Logger.getLogger(LoginForm.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                new LoginForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel UsernameLabel;
    private javax.swing.JLabel iconLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel upozorenje;
    private javax.swing.JTextField usernameField;
    // End of variables declaration//GEN-END:variables
}
